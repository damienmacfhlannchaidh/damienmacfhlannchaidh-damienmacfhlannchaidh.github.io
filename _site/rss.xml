<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  
  <channel>
    <title>Damien Glancy</title>
    <description>Damien Mac Fhlannchaidh is a Software Engineer and Leadership in Ruby and Objective-C/Swift.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/rss.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 19 Aug 2017 17:55:50 +0100</pubDate>
    <lastBuildDate>Sat, 19 Aug 2017 17:55:50 +0100</lastBuildDate>
    
    <item>
      <title>Programming Note: Introducing CoreDataObjectCache</title>
      <description><![CDATA[ <p><strong>An objective-c based URL cache backed by Core Data</strong></p>

<p>This is a network aware pass-thru cache, meaning that you make a request for a URL-based resource to the component. If the cache has the resource it will deliver it from within its store, otherwise if the cache does not have the resource, then it will fetch it for you, insert into its store and return the resource over to you. Subsequent requests for that resource will be delivered from the cache.</p>

<p>It is designed to cache resources for a relatively long time (between application restarts) and is optimized for that use case. It is not as fast as a pure in-memory implementation.</p>

<p>You don’t have to interact with Core Data directly in any way.</p>

<p><strong>Features</strong></p>
<ul>
  <li>High-performance core-data backed cache, utilizing the memory efficiencies of <code class="highlighter-rouge">NSManagedObjects</code>.</li>
  <li>Configurable cache-size.</li>
  <li>Implemented as a singleton, so very simple to use throughout your codebase.</li>
  <li>Asynchronous, block-based API.</li>
  <li>Small and simple code-base: One class file, one matching header and a Core Data model file.</li>
  <li>Monitor the cache performance, cache size, hits, misses, etc.</li>
  <li>Honors <code class="highlighter-rouge">Expiry</code> HTTP headers.</li>
  <li>Full OCUnit test suite that can be included in your projects Test target.</li>
  <li>Architected to only use Apple frameworks and API’s. Does not use any third-party libraries.</li>
</ul>

<p><strong>Installation</strong></p>

<p>You can grab the component and installation instructions from <a href="https://github.com/dglancy/CoreDataObjectCache">GitHub</a>.</p>

<p><strong>Using the cache</strong></p>

<p>Use the cache like this:</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc">  <span class="c1">//init the cache (singleton)
</span>  <span class="n">CoreDataObjectCache</span> <span class="o">*</span><span class="n">cache</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataObjectCache</span> <span class="nf">cache</span><span class="p">];</span>
  
  <span class="c1">//load a resource
</span>  <span class="p">[</span><span class="n">cache</span> <span class="nf">objectWithURL</span><span class="p">:[</span><span class="n">NSURL</span> <span class="nf">URLWithString</span><span class="p">:</span><span class="s">@"http://www.damienmacfhlannchaidh.com/blogimages/weather1.png"</span><span class="p">]</span> <span class="nf">success</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">object</span><span class="p">,</span> <span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">ObjectLoadSource</span> <span class="n">source</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//Notes:
</span>      <span class="c1">//data = is the contents of your URL resource.
</span>      <span class="c1">//response =  contains the http response from your network request, if the cache had to retrieve the resource from the network.
</span>      <span class="c1">//response is nil if it was delivered from the cache
</span>      <span class="c1">//source indicates if the resource was delivered from the network or the cache
</span>  <span class="p">}</span> <span class="n">failure</span><span class="o">:^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//an error occured
</span>  <span class="p">}];</span></code></pre></figure>

<p>You can reset the cache at any time:</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc">  <span class="n">CoreDataObjectCache</span> <span class="o">*</span><span class="n">cache</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataObjectCache</span> <span class="nf">cache</span><span class="p">];</span>
  <span class="p">[</span><span class="n">cache</span> <span class="nf">resetObjectCache</span><span class="p">];</span></code></pre></figure>

<p>Or you can grab specific stats by reading the <code class="highlighter-rouge">cacheHits</code>, <code class="highlighter-rouge">cacheMisses</code> and <code class="highlighter-rouge">totalHits</code> properties. A cache-miss indicates that the cache had to grab the resource from the network.</p>

<p>You can remove a specific resource from the cache:</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc"><span class="n">CoreDataObjectCache</span> <span class="o">*</span><span class="n">cache</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataObjectCache</span> <span class="nf">cache</span><span class="p">];</span>
  
  <span class="c1">//remove a resource from the cache
</span>  <span class="p">[</span><span class="n">cache</span> <span class="nf">removeObjectWithURL</span><span class="p">:[</span><span class="n">NSURL</span> <span class="nf">URLWithString</span><span class="p">:</span><span class="s">@"http://www.damienmacfhlannchaidh.com/blogimages/weather1.png"</span><span class="p">]</span> <span class="nf">success</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">object</span><span class="p">,</span> <span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">ObjectLoadSource</span> <span class="n">source</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//resource removed
</span>  <span class="p">}</span> <span class="n">failure</span><span class="o">:^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//an error occured
</span>  <span class="p">}];</span></code></pre></figure>

<p>Load a <code class="highlighter-rouge">UIImage</code> from the cache:</p>

<figure class="highlight"><pre><code class="language-objc" data-lang="objc">  <span class="n">CoreDataObjectCache</span> <span class="o">*</span><span class="n">cache</span> <span class="o">=</span> <span class="p">[</span><span class="n">CoreDataObjectCache</span> <span class="nf">cache</span><span class="p">];</span>
  
  <span class="c1">//load a resource
</span>  <span class="p">[</span><span class="n">cache</span> <span class="nf">objectWithURL</span><span class="p">:[</span><span class="n">NSURL</span> <span class="nf">URLWithString</span><span class="p">:</span><span class="s">@"http://www.damienmacfhlannchaidh.com/blogimages/weather1.png"</span><span class="p">]</span> <span class="nf">success</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="n">object</span><span class="p">,</span> <span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">ObjectLoadSource</span> <span class="n">source</span><span class="p">)</span> <span class="p">{</span>
       <span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nf">imageWithData</span><span class="p">:</span><span class="n">object</span><span class="p">];</span>
  <span class="p">}</span> <span class="n">failure</span><span class="o">:^</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">//an error occured
</span>  <span class="p">}];</span></code></pre></figure>

<p><strong>Feedback</strong></p>

<p>Please open an GitHub Issue to provide feedback, bugs, enhancements, and suggestions.</p>

<p><strong>License</strong></p>

<p>CoreDataObjectCache is available under the MIT license.</p>
 
<br />
<hr />
<p>You’ve just read <strong>"<a href="http://localhost:4000/2016/10/09/introducing-dg-cache.html">Programming Note: Introducing CoreDataObjectCache</a>"</strong> on <strong>"<a href="http://localhost:4000/">Damien Glancy</a>"</strong>.</p>
 ]]></description>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0100</pubDate>
      <link>http://localhost:4000/2016/10/09/introducing-dg-cache.html</link>
      <guid isPermaLink="true">http://localhost:4000/2016/10/09/introducing-dg-cache.html</guid>
      
      <category>Programming</category>
      
    </item>
    
    <item>
      <title>Programming Note: Debugging Using Sound</title>
      <description><![CDATA[ <p><strong>Headphones may be required for this technique</strong></p>

<p>I recently found myself debugging an app that called a method frequently but without any defined pattern. I wanted to know each time it was called, but I grew tired of using <code class="highlighter-rouge">NSLog</code> as it was totally polluting my output console with garbage.</p>

<p>So I set about seeing what XCode could do to help. Here is the line of code that I wanted to monitor calls to:</p>

<p><img src="/images/blogs/breakpoint1.png" alt="breakpoint1" title="XCode Breakpoint 1" />
<em>(Running gag: yes it was a Core Data method!)</em></p>

<p>So after I set my breakpoint, I «Alt-Cmd-Mouse Click» on the breakpoint to bring up the breakpoint configuration dialog, like so:</p>

<p><img src="/images/blogs/breakpoint2.png" alt="breakpoint2" title="XCode Breakpoint 2" /></p>

<p>I then choose a “Sound” action and used “Ping”. Select the “Automatically continue after evaluating” checkbox. This is important to not have the debugger pause your app every time the breakpoint is triggered.</p>

<p><img src="/images/blogs/breakpoint3.png" alt="breakpoint3" title="XCode Breakpoint 3" /></p>

<p>Now, I get a quiet ping sound every time the method was hit. In this case, every time a save operation was triggered on a <code class="highlighter-rouge">NSManagedContext</code>. Everyone around you can tell you’re debugging!</p>

<p>Debugging is all about feedback, and now I can use my ears as well as my eyes. Try it out, it might very well work for you too!</p>

<p><a href="https://medium.com/@dglancy/debugging-using-sound-31bec4daaec7">This post on medium</a></p>
 
<br />
<hr />
<p>You’ve just read <strong>"<a href="http://localhost:4000/2016/01/16/debugging-with-sound.html">Programming Note: Debugging Using Sound</a>"</strong> on <strong>"<a href="http://localhost:4000/">Damien Glancy</a>"</strong>.</p>
 ]]></description>
      <pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate>
      <link>http://localhost:4000/2016/01/16/debugging-with-sound.html</link>
      <guid isPermaLink="true">http://localhost:4000/2016/01/16/debugging-with-sound.html</guid>
      
      <category>Programming</category>
      
    </item>
    
  </channel>
</rss>
